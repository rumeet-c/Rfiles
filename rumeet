##Assignment2
 makeCacheMatrix <- function(x = matrix()) {
+     i <- NULL
+     set <- function(y) {
+         x <<- y
+         i <<- NULL
+     }
+     get <- function() x
+     setinverse <- function(inverse) i <<- inverse
+     getinverse <- function() i
+     list(
+         set = set,
+         get = get,
+         setinverse = setinverse,
+         getinverse = getinverse)
+ }
> 
> ## The cacheSolve function calculates the inverse of the special "matrix"
> ## the special "matrix" which created with the makeCacheMatrix function.
> ## It first checks to see if the inverse has already been calculated.
> ## Incase, it gets the inverse from the cache and skips the computation.
> ## else, it calculates the inverse of the matrix and sets the value of the inverse
> ## in the cache via the setinverse function.
> 
> cacheSolve <- function(x, ...) {
+     ## Return a matrix that is the inverse of 'x'
+     i <- x$getinverse()
+     if(!is.null(i)) {
+         message("getting cached data")
+         return(i)
+     }
+     data <- x$get()
+     i <- solve(data, ...)
+     x$setinverse(i)
+     i
+ }
